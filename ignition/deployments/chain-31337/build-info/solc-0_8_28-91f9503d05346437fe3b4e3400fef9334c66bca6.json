{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-91f9503d05346437fe3b4e3400fef9334c66bca6",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CCIPBridgeContract.sol": "project/contracts/CCIPBridgeContract.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 10
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/CCIPBridgeContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n// CCIP interfaces\r\ninterface ICCIPRouter {\r\n    struct EVM2AnyMessage {\r\n        bytes receiver;\r\n        bytes data;\r\n        address[] tokenAddresses;\r\n        uint256[] amounts;\r\n        address feeToken;\r\n        bytes extraArgs;\r\n    }\r\n    \r\n    function ccipSend(\r\n        uint64 destinationChainSelector,\r\n        EVM2AnyMessage memory message\r\n    ) external payable returns (bytes32 messageId);\r\n    \r\n    function getFee(\r\n        uint64 destinationChainSelector,\r\n        EVM2AnyMessage memory message\r\n    ) external view returns (uint256 fee);\r\n}\r\n\r\ninterface ICCIPReceiver {\r\n    function ccipReceive(bytes calldata message) external;\r\n}\r\n\r\n/**\r\n * @title CCIPBridge\r\n * @notice Handles cross-chain communication between Ethereum LPVault and Arbitrum HarpoonFactory\r\n * @dev Manages NFT verification, message routing, and fee handling\r\n */\r\ncontract CCIPBridge is Ownable, ReentrancyGuard, Pausable, ICCIPReceiver {\r\n    \r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTANTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    uint256 public constant MAX_MESSAGE_SIZE = 10000; // bytes\r\n    uint256 public constant MESSAGE_TIMEOUT = 1 hours;\r\n    uint256 public constant MAX_RETRY_ATTEMPTS = 3;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STORAGE\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    // CCIP configuration\r\n    ICCIPRouter public immutable ccipRouter;\r\n    uint64 public immutable remoteChainSelector;\r\n    address public remoteContract;\r\n    \r\n    // NFT contracts for access control\r\n    IERC721 public immutable surfBoardNFT;\r\n    IERC721 public immutable mumuFrensNFT;\r\n    \r\n    // LPVault integration (if deployed on Ethereum)\r\n    address public lpVault;\r\n    \r\n    // Message tracking\r\n    mapping(bytes32 => MessageStatus) public messageStatus;\r\n    mapping(address => uint256) public userNonces;\r\n    mapping(bytes32 => uint256) public messageRetries;\r\n    \r\n    // Fee management\r\n    uint256 public baseFee = 0.01 ether;\r\n    address public feeRecipient;\r\n    \r\n    // Rate limiting\r\n    mapping(address => uint256) public lastMessageTime;\r\n    uint256 public messageRateLimit = 1 minutes;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STRUCTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    struct MessageStatus {\r\n        address sender;\r\n        uint256 timestamp;\r\n        bool delivered;\r\n        bool failed;\r\n        uint256 retryCount;\r\n    }\r\n    \r\n    struct CrossChainMessage {\r\n        address sender;\r\n        bytes4 selector;\r\n        bytes data;\r\n        uint256 nonce;\r\n        uint256 timestamp;\r\n        uint256 deadline;\r\n    }\r\n    \r\n    struct HarpoonRequest {\r\n        address creator;\r\n        HarpoonParams params;\r\n        uint256 lpStake; // User's LP stake amount (for verification)\r\n        uint256[] nftTokenIds; // NFT tokens owned by user\r\n    }\r\n    \r\n    struct HarpoonParams {\r\n        address targetToken;\r\n        uint256 collateralAmount;\r\n        uint256 leverage;\r\n        bool isLong;\r\n        uint256 slippageBps;\r\n        string platform;\r\n        uint256 duration;\r\n        bytes platformSpecificData;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event MessageSent(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        uint64 indexed destinationChain,\r\n        bytes4 selector,\r\n        bytes data\r\n    );\r\n    \r\n    event MessageReceived(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        bytes4 indexed selector\r\n    );\r\n    \r\n    event MessageFailed(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        string reason\r\n    );\r\n    \r\n    event MessageRetried(\r\n        bytes32 indexed messageId,\r\n        uint256 retryCount\r\n    );\r\n    \r\n    event HarpoonRequested(\r\n        address indexed creator,\r\n        bytes32 indexed messageId,\r\n        HarpoonParams params\r\n    );\r\n    \r\n    event NFTVerified(\r\n        address indexed user,\r\n        uint256[] tokenIds,\r\n        bool verified\r\n    );\r\n    \r\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\r\n    event RemoteContractUpdated(address oldContract, address newContract);\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             MODIFIERS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    modifier onlyNFTHolder(address user) {\r\n        require(_hasEligibleNFT(user), \"No eligible NFT\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCCIP() {\r\n        require(msg.sender == address(ccipRouter), \"Not CCIP router\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyRemoteContract() {\r\n        require(msg.sender == remoteContract, \"Not remote contract\");\r\n        _;\r\n    }\r\n    \r\n    modifier rateLimited(address user) {\r\n        require(\r\n            block.timestamp >= lastMessageTime[user] + messageRateLimit,\r\n            \"Rate limit exceeded\"\r\n        );\r\n        lastMessageTime[user] = block.timestamp;\r\n        _;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTRUCTOR\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    constructor(\r\n        address _ccipRouter,\r\n        uint64 _remoteChainSelector,\r\n        address _surfBoardNFT,\r\n        address _mumuFrensNFT,\r\n        address _feeRecipient\r\n    ) Ownable(msg.sender) {\r\n        require(_ccipRouter != address(0), \"Invalid CCIP router\");\r\n        require(_surfBoardNFT != address(0), \"Invalid SURF Board NFT\");\r\n        require(_mumuFrensNFT != address(0), \"Invalid mumu-frens NFT\");\r\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\r\n        \r\n        ccipRouter = ICCIPRouter(_ccipRouter);\r\n        remoteChainSelector = _remoteChainSelector;\r\n        surfBoardNFT = IERC721(_surfBoardNFT);\r\n        mumuFrensNFT = IERC721(_mumuFrensNFT);\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CROSS-CHAIN MESSAGING\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Send a Harpoon creation request to Arbitrum\r\n     * @param params Harpoon parameters\r\n     * @return messageId CCIP message ID\r\n     */\r\n    function requestHarpoonCreation(HarpoonParams calldata params)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyNFTHolder(msg.sender)\r\n        rateLimited(msg.sender)\r\n        returns (bytes32 messageId)\r\n    {\r\n        require(remoteContract != address(0), \"Remote contract not set\");\r\n        require(msg.value >= baseFee, \"Insufficient fee\");\r\n        \r\n        // Verify user's NFT ownership\r\n        uint256[] memory tokenIds = _getUserNFTTokens(msg.sender);\r\n        require(tokenIds.length > 0, \"No NFTs found\");\r\n        \r\n        // Get user's LP stake (if LPVault is set)\r\n        uint256 lpStake = 0;\r\n        if (lpVault != address(0)) {\r\n            // Would call LPVault to get user's stake\r\n            // lpStake = ILPVault(lpVault).getUserStake(msg.sender);\r\n        }\r\n        \r\n        // Create cross-chain message\r\n        uint256 nonce = ++userNonces[msg.sender];\r\n        HarpoonRequest memory request = HarpoonRequest({\r\n            creator: msg.sender,\r\n            params: params,\r\n            lpStake: lpStake,\r\n            nftTokenIds: tokenIds\r\n        });\r\n        \r\n        CrossChainMessage memory message = CrossChainMessage({\r\n            sender: msg.sender,\r\n            selector: bytes4(keccak256(\"createHarpoonFromCCIP(HarpoonParams,address)\")),\r\n            data: abi.encode(params, msg.sender),\r\n            nonce: nonce,\r\n            timestamp: block.timestamp,\r\n            deadline: block.timestamp + MESSAGE_TIMEOUT\r\n        });\r\n        \r\n        // Send CCIP message\r\n        messageId = _sendCCIPMessage(message);\r\n        \r\n        // Track message\r\n        messageStatus[messageId] = MessageStatus({\r\n            sender: msg.sender,\r\n            timestamp: block.timestamp,\r\n            delivered: false,\r\n            failed: false,\r\n            retryCount: 0\r\n        });\r\n        \r\n        // Transfer fee\r\n        if (msg.value > 0) {\r\n            payable(feeRecipient).transfer(msg.value);\r\n        }\r\n        \r\n        emit HarpoonRequested(msg.sender, messageId, params);\r\n        emit NFTVerified(msg.sender, tokenIds, true);\r\n        \r\n        return messageId;\r\n    }\r\n    \r\n    /**\r\n     * @notice Retry failed message\r\n     * @param messageId Message ID to retry\r\n     */\r\n    function retryMessage(bytes32 messageId) external payable nonReentrant {\r\n        MessageStatus storage status = messageStatus[messageId];\r\n        require(status.sender == msg.sender, \"Not message sender\");\r\n        require(status.failed || (!status.delivered && block.timestamp > status.timestamp + MESSAGE_TIMEOUT), \"Message not failed\");\r\n        require(status.retryCount < MAX_RETRY_ATTEMPTS, \"Max retries exceeded\");\r\n        require(msg.value >= baseFee, \"Insufficient fee\");\r\n        \r\n        status.retryCount++;\r\n        status.failed = false;\r\n        messageRetries[messageId] = status.retryCount;\r\n        \r\n        // Transfer fee\r\n        if (msg.value > 0) {\r\n            payable(feeRecipient).transfer(msg.value);\r\n        }\r\n        \r\n        emit MessageRetried(messageId, status.retryCount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Internal function to send CCIP message\r\n     * @param message Cross-chain message\r\n     * @return messageId CCIP message ID\r\n     */\r\n    function _sendCCIPMessage(CrossChainMessage memory message)\r\n        internal\r\n        returns (bytes32 messageId)\r\n    {\r\n        // Encode message\r\n        bytes memory encodedMessage = abi.encode(message);\r\n        require(encodedMessage.length <= MAX_MESSAGE_SIZE, \"Message too large\");\r\n        \r\n        // Prepare CCIP message\r\n        ICCIPRouter.EVM2AnyMessage memory ccipMessage = ICCIPRouter.EVM2AnyMessage({\r\n            receiver: abi.encode(remoteContract),\r\n            data: encodedMessage,\r\n            tokenAddresses: new address[](0),\r\n            amounts: new uint256[](0),\r\n            feeToken: address(0), // ETH\r\n            extraArgs: \"\"\r\n        });\r\n        \r\n        // Calculate fee\r\n        uint256 ccipFee = ccipRouter.getFee(remoteChainSelector, ccipMessage);\r\n        require(address(this).balance >= ccipFee, \"Insufficient balance for CCIP fee\");\r\n        \r\n        // Send message\r\n        messageId = ccipRouter.ccipSend{value: ccipFee}(remoteChainSelector, ccipMessage);\r\n        \r\n        emit MessageSent(\r\n            messageId,\r\n            message.sender,\r\n            remoteChainSelector,\r\n            message.selector,\r\n            message.data\r\n        );\r\n        \r\n        return messageId;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CCIP RECEIVER\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Receive CCIP messages from remote chain\r\n     * @param message Encoded CCIP message\r\n     */\r\n    function ccipReceive(bytes calldata message) external override onlyCCIP {\r\n        try this._processCCIPMessage(message) {\r\n            // Message processed successfully\r\n        } catch Error(string memory reason) {\r\n            emit MessageFailed(keccak256(message), msg.sender, reason);\r\n        } catch {\r\n            emit MessageFailed(keccak256(message), msg.sender, \"Unknown error\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Process received CCIP message\r\n     * @param message Encoded message\r\n     */\r\n    function _processCCIPMessage(bytes calldata message) external {\r\n        require(msg.sender == address(this), \"Only self\");\r\n        \r\n        CrossChainMessage memory ccipMessage = abi.decode(message, (CrossChainMessage));\r\n        bytes32 messageId = keccak256(message);\r\n        \r\n        // Verify message hasn't expired\r\n        require(block.timestamp <= ccipMessage.deadline, \"Message expired\");\r\n        \r\n        // Route message based on selector\r\n        if (ccipMessage.selector == bytes4(keccak256(\"harpoonCreated(address,address,uint256)\"))) {\r\n            (address creator, address harpoon, uint256 harpoonId) = abi.decode(\r\n                ccipMessage.data,\r\n                (address, address, uint256)\r\n            );\r\n            _handleHarpoonCreated(creator, harpoon, harpoonId);\r\n        } else if (ccipMessage.selector == bytes4(keccak256(\"harpoonClosed(address,uint256,int256)\"))) {\r\n            (address creator, uint256 harpoonId, int256 pnl) = abi.decode(\r\n                ccipMessage.data,\r\n                (address, uint256, int256)\r\n            );\r\n            _handleHarpoonClosed(creator, harpoonId, pnl);\r\n        }\r\n        \r\n        emit MessageReceived(messageId, ccipMessage.sender, ccipMessage.selector);\r\n    }\r\n    \r\n    /**\r\n     * @notice Handle Harpoon creation confirmation\r\n     */\r\n    function _handleHarpoonCreated(address creator, address harpoon, uint256 harpoonId) internal {\r\n        // Could update LP rewards or notify LPVault\r\n        if (lpVault != address(0)) {\r\n            // ILPVault(lpVault).notifyHarpoonCreated(creator, harpoonId);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Handle Harpoon closure notification\r\n     */\r\n    function _handleHarpoonClosed(address creator, uint256 harpoonId, int256 pnl) internal {\r\n        // Could distribute profits to LP vault or update rewards\r\n        if (lpVault != address(0) && pnl > 0) {\r\n            // ILPVault(lpVault).distributeProfits(uint256(pnl));\r\n        }\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          NFT VERIFICATION\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Check if user has eligible NFT\r\n     * @param user User address\r\n     * @return True if user owns SURF Board or mumu-frens NFT\r\n     */\r\n    function _hasEligibleNFT(address user) internal view returns (bool) {\r\n        return surfBoardNFT.balanceOf(user) > 0 || mumuFrensNFT.balanceOf(user) > 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get user's NFT token IDs\r\n     * @param user User address\r\n     * @return Array of token IDs owned by user\r\n     */\r\n    function _getUserNFTTokens(address user) internal view returns (uint256[] memory) {\r\n        uint256 surfBalance = surfBoardNFT.balanceOf(user);\r\n        uint256 mumuBalance = mumuFrensNFT.balanceOf(user);\r\n        uint256 totalBalance = surfBalance + mumuBalance;\r\n        \r\n        uint256[] memory tokenIds = new uint256[](totalBalance);\r\n        uint256 index = 0;\r\n        \r\n        // Add SURF Board NFT token IDs (simplified - would need proper enumeration)\r\n        for (uint256 i = 0; i < surfBalance && index < totalBalance; i++) {\r\n            // tokenIds[index] = surfBoardNFT.tokenOfOwnerByIndex(user, i);\r\n            tokenIds[index] = i; // Placeholder\r\n            index++;\r\n        }\r\n        \r\n        // Add mumu-frens NFT token IDs\r\n        for (uint256 i = 0; i < mumuBalance && index < totalBalance; i++) {\r\n            // tokenIds[index] = mumuFrensNFT.tokenOfOwnerByIndex(user, i);\r\n            tokenIds[index] = i + 10000; // Placeholder with offset\r\n            index++;\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           VIEW FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Get message status\r\n     * @param messageId Message ID\r\n     * @return sender Message sender address\r\n     * @return timestamp Message timestamp\r\n     * @return delivered Whether message was delivered\r\n     * @return failed Whether message failed\r\n     * @return retryCount Number of retry attempts\r\n     */\r\n    function getMessageStatus(bytes32 messageId) external view returns (\r\n        address sender,\r\n        uint256 timestamp,\r\n        bool delivered,\r\n        bool failed,\r\n        uint256 retryCount\r\n    ) {\r\n        MessageStatus memory status = messageStatus[messageId];\r\n        return (\r\n            status.sender,\r\n            status.timestamp,\r\n            status.delivered,\r\n            status.failed,\r\n            status.retryCount\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate CCIP fee for message\r\n     * @param params Harpoon parameters\r\n     * @return Total fee required\r\n     */\r\n    function calculateFee(HarpoonParams calldata params) external view returns (uint256) {\r\n        if (remoteContract == address(0)) return baseFee;\r\n        \r\n        CrossChainMessage memory message = CrossChainMessage({\r\n            sender: msg.sender,\r\n            selector: bytes4(keccak256(\"createHarpoonFromCCIP(HarpoonParams,address)\")),\r\n            data: abi.encode(params, msg.sender),\r\n            nonce: userNonces[msg.sender] + 1,\r\n            timestamp: block.timestamp,\r\n            deadline: block.timestamp + MESSAGE_TIMEOUT\r\n        });\r\n        \r\n        bytes memory encodedMessage = abi.encode(message);\r\n        \r\n        ICCIPRouter.EVM2AnyMessage memory ccipMessage = ICCIPRouter.EVM2AnyMessage({\r\n            receiver: abi.encode(remoteContract),\r\n            data: encodedMessage,\r\n            tokenAddresses: new address[](0),\r\n            amounts: new uint256[](0),\r\n            feeToken: address(0),\r\n            extraArgs: \"\"\r\n        });\r\n        \r\n        return baseFee + ccipRouter.getFee(remoteChainSelector, ccipMessage);\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if user can send message (rate limit)\r\n     * @param user User address\r\n     * @return True if user can send message\r\n     */\r\n    function canSendMessage(address user) external view returns (bool) {\r\n        return block.timestamp >= lastMessageTime[user] + messageRateLimit;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          ADMIN FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Set remote contract address\r\n     * @param _remoteContract Remote contract address on destination chain\r\n     */\r\n    function setRemoteContract(address _remoteContract) external onlyOwner {\r\n        address oldContract = remoteContract;\r\n        remoteContract = _remoteContract;\r\n        emit RemoteContractUpdated(oldContract, _remoteContract);\r\n    }\r\n    \r\n    /**\r\n     * @notice Set LP Vault address\r\n     * @param _lpVault LP Vault contract address\r\n     */\r\n    function setLPVault(address _lpVault) external onlyOwner {\r\n        lpVault = _lpVault;\r\n    }\r\n    \r\n    /**\r\n     * @notice Update base fee\r\n     * @param _newFee New base fee\r\n     */\r\n    function setBaseFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = baseFee;\r\n        baseFee = _newFee;\r\n        emit FeeUpdated(oldFee, _newFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice Update fee recipient\r\n     * @param _newRecipient New fee recipient\r\n     */\r\n    function setFeeRecipient(address _newRecipient) external onlyOwner {\r\n        require(_newRecipient != address(0), \"Invalid recipient\");\r\n        feeRecipient = _newRecipient;\r\n    }\r\n    \r\n    /**\r\n     * @notice Update message rate limit\r\n     * @param _newLimit New rate limit in seconds\r\n     */\r\n    function setMessageRateLimit(uint256 _newLimit) external onlyOwner {\r\n        messageRateLimit = _newLimit;\r\n    }\r\n    \r\n    /**\r\n     * @notice Pause the bridge\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Unpause the bridge\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency withdraw ETH\r\n     */\r\n    function emergencyWithdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @notice Deposit ETH for CCIP fees\r\n     */\r\n    function depositForFees() external payable onlyOwner {\r\n        // ETH received for CCIP fees\r\n    }\r\n    \r\n    /**\r\n     * @notice Receive ETH\r\n     */\r\n    receive() external payable {}\r\n}"
      }
    }
  }
}