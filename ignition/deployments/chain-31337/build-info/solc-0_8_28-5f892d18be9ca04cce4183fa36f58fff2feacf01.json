{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-5f892d18be9ca04cce4183fa36f58fff2feacf01",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/DeploymentManager.sol": "project/contracts/DeploymentManager.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 10
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/proxy/Clones.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Errors.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Return the 512-bit addition of two uint256.\n     *\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\n     */\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        assembly (\"memory-safe\") {\n            low := add(a, b)\n            high := lt(low, a)\n        }\n    }\n\n    /**\n     * @dev Return the 512-bit multiplication of two uint256.\n     *\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\n     */\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = high * 2²⁵⁶ + low.\n        assembly (\"memory-safe\") {\n            let mm := mulmod(a, b, not(0))\n            low := mul(a, b)\n            high := sub(sub(mm, low), lt(mm, low))\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            success = c >= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a - b;\n            success = c <= a;\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a * b;\n            assembly (\"memory-safe\") {\n                // Only true when the multiplication doesn't overflow\n                // (c / a == b) || (a == 0)\n                success := or(eq(div(c, a), b), iszero(a))\n            }\n            // equivalent to: success ? c : 0\n            result = c * SafeCast.toUint(success);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `DIV` opcode returns zero when the denominator is 0.\n                result := div(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            success = b > 0;\n            assembly (\"memory-safe\") {\n                // The `MOD` opcode returns zero when the denominator is 0.\n                result := mod(a, b)\n            }\n        }\n    }\n\n    /**\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryAdd(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\n     */\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        (, uint256 result) = trySub(a, b);\n        return result;\n    }\n\n    /**\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\n     */\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        (bool success, uint256 result) = tryMul(a, b);\n        return ternary(success, result, type(uint256).max);\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (high == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return low / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= high) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [high low].\n            uint256 remainder;\n            assembly (\"memory-safe\") {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                high := sub(high, gt(remainder, low))\n                low := sub(low, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly (\"memory-safe\") {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [high low] by twos.\n                low := div(low, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from high into low.\n            low |= high * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\n            // is no longer required.\n            result = low * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\n        unchecked {\n            (uint256 high, uint256 low) = mul512(x, y);\n            if (high >= 1 << n) {\n                Panic.panic(Panic.UNDER_OVERFLOW);\n            }\n            return (high << (256 - n)) | (low >> n);\n        }\n    }\n\n    /**\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\n     */\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // If upper 8 bits of 16-bit half set, add 8 to result\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\n        // If upper 4 bits of 8-bit half set, add 4 to result\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\n\n        // Shifts value right by the current result and use it as an index into this lookup table:\n        //\n        // | x (4 bits) |  index  | table[index] = MSB position |\n        // |------------|---------|-----------------------------|\n        // |    0000    |    0    |        table[0] = 0         |\n        // |    0001    |    1    |        table[1] = 0         |\n        // |    0010    |    2    |        table[2] = 1         |\n        // |    0011    |    3    |        table[3] = 1         |\n        // |    0100    |    4    |        table[4] = 2         |\n        // |    0101    |    5    |        table[5] = 2         |\n        // |    0110    |    6    |        table[6] = 2         |\n        // |    0111    |    7    |        table[7] = 2         |\n        // |    1000    |    8    |        table[8] = 3         |\n        // |    1001    |    9    |        table[9] = 3         |\n        // |    1010    |   10    |        table[10] = 3        |\n        // |    1011    |   11    |        table[11] = 3        |\n        // |    1100    |   12    |        table[12] = 3        |\n        // |    1101    |   13    |        table[13] = 3        |\n        // |    1110    |   14    |        table[14] = 3        |\n        // |    1111    |   15    |        table[15] = 3        |\n        //\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\n        assembly (\"memory-safe\") {\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 x) internal pure returns (uint256 r) {\n        // If value has upper 128 bits set, log2 result is at least 128\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\n        // If upper 64 bits of 128-bit half set, add 64 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\n        // If upper 32 bits of 64-bit half set, add 32 to result\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\n        // If upper 16 bits of 32-bit half set, add 16 to result\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/math/SafeCast.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Panic.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/CCIPBridgeContract.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n// CCIP interfaces\r\ninterface ICCIPRouter {\r\n    struct EVM2AnyMessage {\r\n        bytes receiver;\r\n        bytes data;\r\n        address[] tokenAddresses;\r\n        uint256[] amounts;\r\n        address feeToken;\r\n        bytes extraArgs;\r\n    }\r\n    \r\n    function ccipSend(\r\n        uint64 destinationChainSelector,\r\n        EVM2AnyMessage memory message\r\n    ) external payable returns (bytes32 messageId);\r\n    \r\n    function getFee(\r\n        uint64 destinationChainSelector,\r\n        EVM2AnyMessage memory message\r\n    ) external view returns (uint256 fee);\r\n}\r\n\r\ninterface ICCIPReceiver {\r\n    function ccipReceive(bytes calldata message) external;\r\n}\r\n\r\n/**\r\n * @title CCIPBridge\r\n * @notice Handles cross-chain communication between Ethereum LPVault and Arbitrum HarpoonFactory\r\n * @dev Manages NFT verification, message routing, and fee handling\r\n */\r\ncontract CCIPBridge is Ownable, ReentrancyGuard, Pausable, ICCIPReceiver {\r\n    \r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTANTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    uint256 public constant MAX_MESSAGE_SIZE = 10000; // bytes\r\n    uint256 public constant MESSAGE_TIMEOUT = 1 hours;\r\n    uint256 public constant MAX_RETRY_ATTEMPTS = 3;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STORAGE\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    // CCIP configuration\r\n    ICCIPRouter public immutable ccipRouter;\r\n    uint64 public immutable remoteChainSelector;\r\n    address public remoteContract;\r\n    \r\n    // NFT contracts for access control\r\n    IERC721 public immutable surfBoardNFT;\r\n    IERC721 public immutable mumuFrensNFT;\r\n    \r\n    // LPVault integration (if deployed on Ethereum)\r\n    address public lpVault;\r\n    \r\n    // Message tracking\r\n    mapping(bytes32 => MessageStatus) public messageStatus;\r\n    mapping(address => uint256) public userNonces;\r\n    mapping(bytes32 => uint256) public messageRetries;\r\n    \r\n    // Fee management\r\n    uint256 public baseFee = 0.01 ether;\r\n    address public feeRecipient;\r\n    \r\n    // Rate limiting\r\n    mapping(address => uint256) public lastMessageTime;\r\n    uint256 public messageRateLimit = 1 minutes;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STRUCTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    struct MessageStatus {\r\n        address sender;\r\n        uint256 timestamp;\r\n        bool delivered;\r\n        bool failed;\r\n        uint256 retryCount;\r\n    }\r\n    \r\n    struct CrossChainMessage {\r\n        address sender;\r\n        bytes4 selector;\r\n        bytes data;\r\n        uint256 nonce;\r\n        uint256 timestamp;\r\n        uint256 deadline;\r\n    }\r\n    \r\n    struct HarpoonRequest {\r\n        address creator;\r\n        HarpoonParams params;\r\n        uint256 lpStake; // User's LP stake amount (for verification)\r\n        uint256[] nftTokenIds; // NFT tokens owned by user\r\n    }\r\n    \r\n    struct HarpoonParams {\r\n        address targetToken;\r\n        uint256 collateralAmount;\r\n        uint256 leverage;\r\n        bool isLong;\r\n        uint256 slippageBps;\r\n        string platform;\r\n        uint256 duration;\r\n        bytes platformSpecificData;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event MessageSent(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        uint64 indexed destinationChain,\r\n        bytes4 selector,\r\n        bytes data\r\n    );\r\n    \r\n    event MessageReceived(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        bytes4 indexed selector\r\n    );\r\n    \r\n    event MessageFailed(\r\n        bytes32 indexed messageId,\r\n        address indexed sender,\r\n        string reason\r\n    );\r\n    \r\n    event MessageRetried(\r\n        bytes32 indexed messageId,\r\n        uint256 retryCount\r\n    );\r\n    \r\n    event HarpoonRequested(\r\n        address indexed creator,\r\n        bytes32 indexed messageId,\r\n        HarpoonParams params\r\n    );\r\n    \r\n    event NFTVerified(\r\n        address indexed user,\r\n        uint256[] tokenIds,\r\n        bool verified\r\n    );\r\n    \r\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\r\n    event RemoteContractUpdated(address oldContract, address newContract);\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             MODIFIERS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    modifier onlyNFTHolder(address user) {\r\n        require(_hasEligibleNFT(user), \"No eligible NFT\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCCIP() {\r\n        require(msg.sender == address(ccipRouter), \"Not CCIP router\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyRemoteContract() {\r\n        require(msg.sender == remoteContract, \"Not remote contract\");\r\n        _;\r\n    }\r\n    \r\n    modifier rateLimited(address user) {\r\n        require(\r\n            block.timestamp >= lastMessageTime[user] + messageRateLimit,\r\n            \"Rate limit exceeded\"\r\n        );\r\n        lastMessageTime[user] = block.timestamp;\r\n        _;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTRUCTOR\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    constructor(\r\n        address _ccipRouter,\r\n        uint64 _remoteChainSelector,\r\n        address _surfBoardNFT,\r\n        address _mumuFrensNFT,\r\n        address _feeRecipient\r\n    ) Ownable(msg.sender) {\r\n        require(_ccipRouter != address(0), \"Invalid CCIP router\");\r\n        require(_surfBoardNFT != address(0), \"Invalid SURF Board NFT\");\r\n        require(_mumuFrensNFT != address(0), \"Invalid mumu-frens NFT\");\r\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\r\n        \r\n        ccipRouter = ICCIPRouter(_ccipRouter);\r\n        remoteChainSelector = _remoteChainSelector;\r\n        surfBoardNFT = IERC721(_surfBoardNFT);\r\n        mumuFrensNFT = IERC721(_mumuFrensNFT);\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CROSS-CHAIN MESSAGING\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Send a Harpoon creation request to Arbitrum\r\n     * @param params Harpoon parameters\r\n     * @return messageId CCIP message ID\r\n     */\r\n    function requestHarpoonCreation(HarpoonParams calldata params)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyNFTHolder(msg.sender)\r\n        rateLimited(msg.sender)\r\n        returns (bytes32 messageId)\r\n    {\r\n        require(remoteContract != address(0), \"Remote contract not set\");\r\n        require(msg.value >= baseFee, \"Insufficient fee\");\r\n        \r\n        // Verify user's NFT ownership\r\n        uint256[] memory tokenIds = _getUserNFTTokens(msg.sender);\r\n        require(tokenIds.length > 0, \"No NFTs found\");\r\n        \r\n        // Get user's LP stake (if LPVault is set)\r\n        uint256 lpStake = 0;\r\n        if (lpVault != address(0)) {\r\n            // Would call LPVault to get user's stake\r\n            // lpStake = ILPVault(lpVault).getUserStake(msg.sender);\r\n        }\r\n        \r\n        // Create cross-chain message\r\n        uint256 nonce = ++userNonces[msg.sender];\r\n        HarpoonRequest memory request = HarpoonRequest({\r\n            creator: msg.sender,\r\n            params: params,\r\n            lpStake: lpStake,\r\n            nftTokenIds: tokenIds\r\n        });\r\n        \r\n        CrossChainMessage memory message = CrossChainMessage({\r\n            sender: msg.sender,\r\n            selector: bytes4(keccak256(\"createHarpoonFromCCIP(HarpoonParams,address)\")),\r\n            data: abi.encode(params, msg.sender),\r\n            nonce: nonce,\r\n            timestamp: block.timestamp,\r\n            deadline: block.timestamp + MESSAGE_TIMEOUT\r\n        });\r\n        \r\n        // Send CCIP message\r\n        messageId = _sendCCIPMessage(message);\r\n        \r\n        // Track message\r\n        messageStatus[messageId] = MessageStatus({\r\n            sender: msg.sender,\r\n            timestamp: block.timestamp,\r\n            delivered: false,\r\n            failed: false,\r\n            retryCount: 0\r\n        });\r\n        \r\n        // Transfer fee\r\n        if (msg.value > 0) {\r\n            payable(feeRecipient).transfer(msg.value);\r\n        }\r\n        \r\n        emit HarpoonRequested(msg.sender, messageId, params);\r\n        emit NFTVerified(msg.sender, tokenIds, true);\r\n        \r\n        return messageId;\r\n    }\r\n    \r\n    /**\r\n     * @notice Retry failed message\r\n     * @param messageId Message ID to retry\r\n     */\r\n    function retryMessage(bytes32 messageId) external payable nonReentrant {\r\n        MessageStatus storage status = messageStatus[messageId];\r\n        require(status.sender == msg.sender, \"Not message sender\");\r\n        require(status.failed || (!status.delivered && block.timestamp > status.timestamp + MESSAGE_TIMEOUT), \"Message not failed\");\r\n        require(status.retryCount < MAX_RETRY_ATTEMPTS, \"Max retries exceeded\");\r\n        require(msg.value >= baseFee, \"Insufficient fee\");\r\n        \r\n        status.retryCount++;\r\n        status.failed = false;\r\n        messageRetries[messageId] = status.retryCount;\r\n        \r\n        // Transfer fee\r\n        if (msg.value > 0) {\r\n            payable(feeRecipient).transfer(msg.value);\r\n        }\r\n        \r\n        emit MessageRetried(messageId, status.retryCount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Internal function to send CCIP message\r\n     * @param message Cross-chain message\r\n     * @return messageId CCIP message ID\r\n     */\r\n    function _sendCCIPMessage(CrossChainMessage memory message)\r\n        internal\r\n        returns (bytes32 messageId)\r\n    {\r\n        // Encode message\r\n        bytes memory encodedMessage = abi.encode(message);\r\n        require(encodedMessage.length <= MAX_MESSAGE_SIZE, \"Message too large\");\r\n        \r\n        // Prepare CCIP message\r\n        ICCIPRouter.EVM2AnyMessage memory ccipMessage = ICCIPRouter.EVM2AnyMessage({\r\n            receiver: abi.encode(remoteContract),\r\n            data: encodedMessage,\r\n            tokenAddresses: new address[](0),\r\n            amounts: new uint256[](0),\r\n            feeToken: address(0), // ETH\r\n            extraArgs: \"\"\r\n        });\r\n        \r\n        // Calculate fee\r\n        uint256 ccipFee = ccipRouter.getFee(remoteChainSelector, ccipMessage);\r\n        require(address(this).balance >= ccipFee, \"Insufficient balance for CCIP fee\");\r\n        \r\n        // Send message\r\n        messageId = ccipRouter.ccipSend{value: ccipFee}(remoteChainSelector, ccipMessage);\r\n        \r\n        emit MessageSent(\r\n            messageId,\r\n            message.sender,\r\n            remoteChainSelector,\r\n            message.selector,\r\n            message.data\r\n        );\r\n        \r\n        return messageId;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CCIP RECEIVER\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Receive CCIP messages from remote chain\r\n     * @param message Encoded CCIP message\r\n     */\r\n    function ccipReceive(bytes calldata message) external override onlyCCIP {\r\n        try this._processCCIPMessage(message) {\r\n            // Message processed successfully\r\n        } catch Error(string memory reason) {\r\n            emit MessageFailed(keccak256(message), msg.sender, reason);\r\n        } catch {\r\n            emit MessageFailed(keccak256(message), msg.sender, \"Unknown error\");\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Process received CCIP message\r\n     * @param message Encoded message\r\n     */\r\n    function _processCCIPMessage(bytes calldata message) external {\r\n        require(msg.sender == address(this), \"Only self\");\r\n        \r\n        CrossChainMessage memory ccipMessage = abi.decode(message, (CrossChainMessage));\r\n        bytes32 messageId = keccak256(message);\r\n        \r\n        // Verify message hasn't expired\r\n        require(block.timestamp <= ccipMessage.deadline, \"Message expired\");\r\n        \r\n        // Route message based on selector\r\n        if (ccipMessage.selector == bytes4(keccak256(\"harpoonCreated(address,address,uint256)\"))) {\r\n            (address creator, address harpoon, uint256 harpoonId) = abi.decode(\r\n                ccipMessage.data,\r\n                (address, address, uint256)\r\n            );\r\n            _handleHarpoonCreated(creator, harpoon, harpoonId);\r\n        } else if (ccipMessage.selector == bytes4(keccak256(\"harpoonClosed(address,uint256,int256)\"))) {\r\n            (address creator, uint256 harpoonId, int256 pnl) = abi.decode(\r\n                ccipMessage.data,\r\n                (address, uint256, int256)\r\n            );\r\n            _handleHarpoonClosed(creator, harpoonId, pnl);\r\n        }\r\n        \r\n        emit MessageReceived(messageId, ccipMessage.sender, ccipMessage.selector);\r\n    }\r\n    \r\n    /**\r\n     * @notice Handle Harpoon creation confirmation\r\n     */\r\n    function _handleHarpoonCreated(address creator, address harpoon, uint256 harpoonId) internal {\r\n        // Could update LP rewards or notify LPVault\r\n        if (lpVault != address(0)) {\r\n            // ILPVault(lpVault).notifyHarpoonCreated(creator, harpoonId);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Handle Harpoon closure notification\r\n     */\r\n    function _handleHarpoonClosed(address creator, uint256 harpoonId, int256 pnl) internal {\r\n        // Could distribute profits to LP vault or update rewards\r\n        if (lpVault != address(0) && pnl > 0) {\r\n            // ILPVault(lpVault).distributeProfits(uint256(pnl));\r\n        }\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          NFT VERIFICATION\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Check if user has eligible NFT\r\n     * @param user User address\r\n     * @return True if user owns SURF Board or mumu-frens NFT\r\n     */\r\n    function _hasEligibleNFT(address user) internal view returns (bool) {\r\n        return surfBoardNFT.balanceOf(user) > 0 || mumuFrensNFT.balanceOf(user) > 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get user's NFT token IDs\r\n     * @param user User address\r\n     * @return Array of token IDs owned by user\r\n     */\r\n    function _getUserNFTTokens(address user) internal view returns (uint256[] memory) {\r\n        uint256 surfBalance = surfBoardNFT.balanceOf(user);\r\n        uint256 mumuBalance = mumuFrensNFT.balanceOf(user);\r\n        uint256 totalBalance = surfBalance + mumuBalance;\r\n        \r\n        uint256[] memory tokenIds = new uint256[](totalBalance);\r\n        uint256 index = 0;\r\n        \r\n        // Add SURF Board NFT token IDs (simplified - would need proper enumeration)\r\n        for (uint256 i = 0; i < surfBalance && index < totalBalance; i++) {\r\n            // tokenIds[index] = surfBoardNFT.tokenOfOwnerByIndex(user, i);\r\n            tokenIds[index] = i; // Placeholder\r\n            index++;\r\n        }\r\n        \r\n        // Add mumu-frens NFT token IDs\r\n        for (uint256 i = 0; i < mumuBalance && index < totalBalance; i++) {\r\n            // tokenIds[index] = mumuFrensNFT.tokenOfOwnerByIndex(user, i);\r\n            tokenIds[index] = i + 10000; // Placeholder with offset\r\n            index++;\r\n        }\r\n        \r\n        return tokenIds;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           VIEW FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Get message status\r\n     * @param messageId Message ID\r\n     * @return sender Message sender address\r\n     * @return timestamp Message timestamp\r\n     * @return delivered Whether message was delivered\r\n     * @return failed Whether message failed\r\n     * @return retryCount Number of retry attempts\r\n     */\r\n    function getMessageStatus(bytes32 messageId) external view returns (\r\n        address sender,\r\n        uint256 timestamp,\r\n        bool delivered,\r\n        bool failed,\r\n        uint256 retryCount\r\n    ) {\r\n        MessageStatus memory status = messageStatus[messageId];\r\n        return (\r\n            status.sender,\r\n            status.timestamp,\r\n            status.delivered,\r\n            status.failed,\r\n            status.retryCount\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate CCIP fee for message\r\n     * @param params Harpoon parameters\r\n     * @return Total fee required\r\n     */\r\n    function calculateFee(HarpoonParams calldata params) external view returns (uint256) {\r\n        if (remoteContract == address(0)) return baseFee;\r\n        \r\n        CrossChainMessage memory message = CrossChainMessage({\r\n            sender: msg.sender,\r\n            selector: bytes4(keccak256(\"createHarpoonFromCCIP(HarpoonParams,address)\")),\r\n            data: abi.encode(params, msg.sender),\r\n            nonce: userNonces[msg.sender] + 1,\r\n            timestamp: block.timestamp,\r\n            deadline: block.timestamp + MESSAGE_TIMEOUT\r\n        });\r\n        \r\n        bytes memory encodedMessage = abi.encode(message);\r\n        \r\n        ICCIPRouter.EVM2AnyMessage memory ccipMessage = ICCIPRouter.EVM2AnyMessage({\r\n            receiver: abi.encode(remoteContract),\r\n            data: encodedMessage,\r\n            tokenAddresses: new address[](0),\r\n            amounts: new uint256[](0),\r\n            feeToken: address(0),\r\n            extraArgs: \"\"\r\n        });\r\n        \r\n        return baseFee + ccipRouter.getFee(remoteChainSelector, ccipMessage);\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if user can send message (rate limit)\r\n     * @param user User address\r\n     * @return True if user can send message\r\n     */\r\n    function canSendMessage(address user) external view returns (bool) {\r\n        return block.timestamp >= lastMessageTime[user] + messageRateLimit;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          ADMIN FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Set remote contract address\r\n     * @param _remoteContract Remote contract address on destination chain\r\n     */\r\n    function setRemoteContract(address _remoteContract) external onlyOwner {\r\n        address oldContract = remoteContract;\r\n        remoteContract = _remoteContract;\r\n        emit RemoteContractUpdated(oldContract, _remoteContract);\r\n    }\r\n    \r\n    /**\r\n     * @notice Set LP Vault address\r\n     * @param _lpVault LP Vault contract address\r\n     */\r\n    function setLPVault(address _lpVault) external onlyOwner {\r\n        lpVault = _lpVault;\r\n    }\r\n    \r\n    /**\r\n     * @notice Update base fee\r\n     * @param _newFee New base fee\r\n     */\r\n    function setBaseFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = baseFee;\r\n        baseFee = _newFee;\r\n        emit FeeUpdated(oldFee, _newFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice Update fee recipient\r\n     * @param _newRecipient New fee recipient\r\n     */\r\n    function setFeeRecipient(address _newRecipient) external onlyOwner {\r\n        require(_newRecipient != address(0), \"Invalid recipient\");\r\n        feeRecipient = _newRecipient;\r\n    }\r\n    \r\n    /**\r\n     * @notice Update message rate limit\r\n     * @param _newLimit New rate limit in seconds\r\n     */\r\n    function setMessageRateLimit(uint256 _newLimit) external onlyOwner {\r\n        messageRateLimit = _newLimit;\r\n    }\r\n    \r\n    /**\r\n     * @notice Pause the bridge\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Unpause the bridge\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency withdraw ETH\r\n     */\r\n    function emergencyWithdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @notice Deposit ETH for CCIP fees\r\n     */\r\n    function depositForFees() external payable onlyOwner {\r\n        // ETH received for CCIP fees\r\n    }\r\n    \r\n    /**\r\n     * @notice Receive ETH\r\n     */\r\n    receive() external payable {}\r\n}"
      },
      "project/contracts/DeploymentManager.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./LPVault.sol\";\r\nimport \"./HarpoonFactory.sol\";\r\nimport \"./Harpoon.sol\";\r\nimport \"./CCIPBridgeContract.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title DeploymentManager\r\n * @notice Manages deployment and configuration of the LP Incentive Protocol\r\n * @dev Handles cross-chain coordination and initial setup\r\n */\r\ncontract DeploymentManager {\r\n    \r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event ContractsDeployed(\r\n        address lpVault,\r\n        address ccipBridge,\r\n        address harpoonFactory,\r\n        address harpoonImplementation\r\n    );\r\n    \r\n    event CrossChainConfigured(\r\n        address ethereumBridge,\r\n        address arbitrumFactory,\r\n        uint64 chainSelector\r\n    );\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          DEPLOYMENT FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Deploy Ethereum contracts (LPVault + CCIPBridge)\r\n     * @param lpTokenAddress SURF/WETH LP token address\r\n     * @param usdcAddress USDC token address\r\n     * @param ccipRouterAddress CCIP router address on Ethereum\r\n     * @param surfBoardNFTAddress SURF Board NFT address\r\n     * @param mumuFrensNFTAddress mumu-frens NFT address\r\n     * @param feeRecipient Fee recipient address\r\n     * @param arbitrumChainSelector Arbitrum chain selector for CCIP\r\n     * @return lpVault LPVault contract address\r\n     * @return ccipBridge CCIPBridge contract address\r\n     */\r\n    function deployEthereumContracts(\r\n        address lpTokenAddress,\r\n        address usdcAddress,\r\n        address ccipRouterAddress,\r\n        address surfBoardNFTAddress,\r\n        address mumuFrensNFTAddress,\r\n        address feeRecipient,\r\n        uint64 arbitrumChainSelector\r\n    ) external returns (address lpVault, address ccipBridge) {\r\n        \r\n        // Deploy LPVault\r\n        lpVault = address(new LPVault(\r\n            lpTokenAddress,\r\n            usdcAddress,\r\n            feeRecipient\r\n        ));\r\n        \r\n        // Deploy CCIP Bridge\r\n        ccipBridge = address(new CCIPBridge(\r\n            ccipRouterAddress,\r\n            arbitrumChainSelector,\r\n            surfBoardNFTAddress,\r\n            mumuFrensNFTAddress,\r\n            feeRecipient\r\n        ));\r\n        \r\n        // Configure bridge to work with LP Vault\r\n        CCIPBridge(payable(ccipBridge)).setLPVault(lpVault);\r\n        \r\n        return (lpVault, ccipBridge);\r\n    }\r\n    \r\n    /**\r\n     * @notice Deploy Arbitrum contracts (HarpoonFactory + implementation)\r\n     * @param ccipRouterAddress CCIP router address on Arbitrum\r\n     * @param ethereumChainSelector Ethereum chain selector for CCIP\r\n     * @param surfBoardNFTAddress SURF Board NFT address on Arbitrum\r\n     * @param mumuFrensNFTAddress mumu-frens NFT address on Arbitrum\r\n     * @param feeRecipient Fee recipient address\r\n     * @param gmxRouterAddress GMX router address\r\n     * @param uniswapRouterAddress Uniswap V3 router address\r\n     * @return harpoonFactory HarpoonFactory contract address\r\n     * @return harpoonImplementation Harpoon implementation address\r\n     */\r\n    function deployArbitrumContracts(\r\n        address ccipRouterAddress,\r\n        uint64 ethereumChainSelector,\r\n        address surfBoardNFTAddress,\r\n        address mumuFrensNFTAddress,\r\n        address feeRecipient,\r\n        address gmxRouterAddress,\r\n        address uniswapRouterAddress\r\n    ) external returns (address harpoonFactory, address harpoonImplementation) {\r\n        \r\n        // Deploy HarpoonFactory\r\n        harpoonFactory = address(new HarpoonFactory(\r\n            ccipRouterAddress,\r\n            ethereumChainSelector,\r\n            surfBoardNFTAddress,\r\n            mumuFrensNFTAddress,\r\n            feeRecipient\r\n        ));\r\n        \r\n        // Get Harpoon implementation address from factory\r\n        harpoonImplementation = HarpoonFactory(payable(harpoonFactory)).harpoonImplementation();\r\n        \r\n        // Configure trading platforms\r\n        HarpoonFactory(payable(harpoonFactory)).addPlatform(\"GMX\", gmxRouterAddress);\r\n        HarpoonFactory(payable(harpoonFactory)).addPlatform(\"UNISWAP\", uniswapRouterAddress);\r\n        \r\n        return (harpoonFactory, harpoonImplementation);\r\n    }\r\n    \r\n    /**\r\n     * @notice Configure cross-chain communication between deployed contracts\r\n     * @param ethereumBridge CCIPBridge address on Ethereum\r\n     * @param arbitrumFactory HarpoonFactory address on Arbitrum\r\n     */\r\n    function configureCrossChain(\r\n        address ethereumBridge,\r\n        address arbitrumFactory\r\n    ) external {\r\n        \r\n        // Configure Ethereum bridge to point to Arbitrum factory\r\n        CCIPBridge(payable(ethereumBridge)).setRemoteContract(arbitrumFactory);\r\n        \r\n        // Configure Arbitrum factory to trust Ethereum bridge\r\n        HarpoonFactory(payable(arbitrumFactory)).setTrustedEthereumSender(ethereumBridge);\r\n        \r\n        emit CrossChainConfigured(\r\n            ethereumBridge,\r\n            arbitrumFactory,\r\n            CCIPBridge(payable(ethereumBridge)).remoteChainSelector()\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @title ProtocolManager\r\n * @notice Helper contract for protocol operations and monitoring\r\n */\r\ncontract ProtocolManager {\r\n    \r\n    // Protocol contracts\r\n    LPVault public lpVault;\r\n    CCIPBridge public ccipBridge;\r\n    HarpoonFactory public harpoonFactory;\r\n    \r\n    // Statistics\r\n    struct ProtocolStats {\r\n        uint256 totalLPStaked;\r\n        uint256 totalUSDCDistributed;\r\n        uint256 totalHarpoons;\r\n        uint256 activeHarpoons;\r\n        uint256 totalPnL;\r\n        uint256 successfulHarpoons;\r\n    }\r\n    \r\n    // Events\r\n    event StatsUpdated(ProtocolStats stats);\r\n    event RewardDistributed(uint256 amount, string source);\r\n    \r\n    constructor(\r\n        address _lpVault,\r\n        address _ccipBridge,\r\n        address _harpoonFactory\r\n    ) {\r\n        lpVault = LPVault(_lpVault);\r\n        ccipBridge = CCIPBridge(payable(_ccipBridge));\r\n        harpoonFactory = HarpoonFactory(payable(_harpoonFactory));\r\n    }\r\n    \r\n    /**\r\n     * @notice Get current protocol statistics\r\n     */\r\n    function getProtocolStats() external view returns (ProtocolStats memory stats) {\r\n        stats.totalLPStaked = lpVault.lpBalance();\r\n        stats.totalUSDCDistributed = lpVault.totalRewardsDistributed();\r\n        stats.totalHarpoons = harpoonFactory.harpoonCount();\r\n        \r\n        // Calculate active harpoons and P&L (simplified)\r\n        for (uint256 i = 0; i < stats.totalHarpoons; i++) {\r\n            address harpoonAddress = harpoonFactory.getHarpoon(i);\r\n            Harpoon harpoon = Harpoon(payable(harpoonAddress));\r\n            \r\n            if (harpoon.status() == Harpoon.Status.Open) {\r\n                stats.activeHarpoons++;\r\n            } else if (harpoon.status() == Harpoon.Status.Closed) {\r\n                stats.successfulHarpoons++;\r\n                (, , , , , int256 pnl) = harpoon.getPositionDetails();\r\n                stats.totalPnL += uint256(pnl > 0 ? pnl : int256(0));\r\n            }\r\n        }\r\n        \r\n        return stats;\r\n    }\r\n    \r\n    /**\r\n     * @notice Distribute Harpoon profits to LP stakers\r\n     * @param profitAmount Amount of profit to distribute\r\n     */\r\n    function distributeProfits(uint256 profitAmount) external {\r\n        require(profitAmount > 0, \"No profits to distribute\");\r\n        \r\n        // Transfer USDC to LP Vault and notify\r\n        IERC20 usdc = lpVault.usdc();\r\n        usdc.transferFrom(msg.sender, address(lpVault), profitAmount);\r\n        lpVault.notifyRewardAmount(profitAmount);\r\n        \r\n        emit RewardDistributed(profitAmount, \"Harpoon profits\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title MockERC20\r\n * @notice Mock ERC20 token for testing\r\n */\r\ncontract MockERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _totalSupply\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n        balanceOf[msg.sender] = _totalSupply;\r\n    }\r\n    \r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n        require(balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n    function mint(address to, uint256 value) external {\r\n        balanceOf[to] += value;\r\n        totalSupply += value;\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title MockNFT\r\n * @notice Mock NFT contract for testing\r\n */\r\ncontract MockNFT {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public totalSupply;\r\n    \r\n    mapping(uint256 => address) public ownerOf;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(uint256 => address) public getApproved;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    \r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function mint(address to, uint256 tokenId) external {\r\n        require(ownerOf[tokenId] == address(0), \"Token already minted\");\r\n        ownerOf[tokenId] = to;\r\n        balanceOf[to]++;\r\n        totalSupply++;\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    \r\n    function approve(address approved, uint256 tokenId) external {\r\n        require(ownerOf[tokenId] == msg.sender, \"Not owner\");\r\n        getApproved[tokenId] = approved;\r\n        emit Approval(msg.sender, approved, tokenId);\r\n    }\r\n    \r\n    function setApprovalForAll(address operator, bool approved) external {\r\n        isApprovedForAll[msg.sender][operator] = approved;\r\n        emit ApprovalForAll(msg.sender, operator, approved);\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 tokenId) external {\r\n        require(ownerOf[tokenId] == from, \"Not owner\");\r\n        require(\r\n            msg.sender == from || \r\n            getApproved[tokenId] == msg.sender || \r\n            isApprovedForAll[from][msg.sender],\r\n            \"Not approved\"\r\n        );\r\n        \r\n        ownerOf[tokenId] = to;\r\n        balanceOf[from]--;\r\n        balanceOf[to]++;\r\n        delete getApproved[tokenId];\r\n        \r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external {\r\n        this.transferFrom(from, to, tokenId);\r\n    }\r\n    \r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata) external {\r\n        this.transferFrom(from, to, tokenId);\r\n    }\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return interfaceId == 0x80ac58cd || // ERC721\r\n               interfaceId == 0x5b5e139f || // ERC721Metadata\r\n               interfaceId == 0x01ffc9a7;   // ERC165\r\n    }\r\n}\r\n\r\n// Deployment configuration\r\nlibrary DeploymentConfig {\r\n    struct EthereumAddresses {\r\n        address ccipRouter;\r\n        address surfLPToken;\r\n        address usdc;\r\n        address surfBoardNFT;\r\n        address mumuFrensNFT;\r\n        address weth;\r\n    }\r\n    \r\n    struct ArbitrumAddresses {\r\n        address ccipRouter;\r\n        address surfBoardNFT;\r\n        address mumuFrensNFT;\r\n        address gmxRouter;\r\n        address uniswapRouter;\r\n        address usdc;\r\n        address weth;\r\n    }\r\n    \r\n    struct ChainSelectors {\r\n        uint64 ethereum;\r\n        uint64 arbitrum;\r\n    }\r\n    \r\n    // Mainnet addresses (examples - replace with actual)\r\n    function getMainnetConfig() internal pure returns (\r\n        EthereumAddresses memory eth,\r\n        ArbitrumAddresses memory arb,\r\n        ChainSelectors memory chains\r\n    ) {\r\n        eth = EthereumAddresses({\r\n            ccipRouter: 0x80226fc0Ee2b096224EeAc085Bb9a8cba1146f7D, // Example\r\n            surfLPToken: 0x0000000000000000000000000000000000000000, // To be deployed\r\n            usdc: 0xa0b86A33E6b84f4b7237D33b4F9F36dcb8dB37E8,\r\n            surfBoardNFT: 0x0000000000000000000000000000000000000000, // To be provided\r\n            mumuFrensNFT: 0x0000000000000000000000000000000000000000, // To be provided\r\n            weth: 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\r\n        });\r\n        \r\n        arb = ArbitrumAddresses({\r\n            ccipRouter: 0x141fa059441E0ca23ce184B6A78bafD2A517DdE8, // Example\r\n            surfBoardNFT: 0x0000000000000000000000000000000000000000, // To be bridged/deployed\r\n            mumuFrensNFT: 0x0000000000000000000000000000000000000000, // To be bridged/deployed\r\n            gmxRouter: 0xaBBc5F99639c9B6bCb58544ddf04EFA6802F4064,\r\n            uniswapRouter: 0xE592427A0AEce92De3Edee1F18E0157C05861564,\r\n            usdc: 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8,\r\n            weth: 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\r\n        });\r\n        \r\n        chains = ChainSelectors({\r\n            ethereum: 5009297550715157269,\r\n            arbitrum: 4949039107694359620\r\n        });\r\n    }\r\n}"
      },
      "project/contracts/Harpoon.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\n\r\n// Trading platform interfaces\r\ninterface IGMXRouter {\r\n    function createIncreasePosition(\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _amountIn,\r\n        uint256 _minOut,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _acceptablePrice\r\n    ) external payable;\r\n    \r\n    function createDecreasePosition(\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _collateralDelta,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        address _receiver,\r\n        uint256 _acceptablePrice,\r\n        uint256 _minOut\r\n    ) external payable;\r\n}\r\n\r\ninterface IUniswapV3Router {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n    \r\n    function exactInputSingle(ExactInputSingleParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amountOut);\r\n}\r\n\r\n/**\r\n * @title Harpoon\r\n * @notice Individual trading position contract supporting GMX and Uniswap\r\n * @dev Supports creator closure, NFT holder voting, and automated liquidation\r\n */\r\ncontract Harpoon is Initializable, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTANTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    uint256 public constant VOTE_DURATION = 7 days;\r\n    uint256 public constant MIN_VOTES_FOR_CLOSURE = 3;\r\n    uint256 public constant LIQUIDATION_THRESHOLD_BPS = 8500; // 85% loss triggers liquidation\r\n    uint256 public constant MAX_BPS = 10000;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             ENUMS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    enum Status { Pending, Open, Closed, Liquidated }\r\n    enum Platform { GMX, UNISWAP }\r\n    enum CloseReason { Creator, Vote, Liquidation, Expiry }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STRUCTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    struct PositionParams {\r\n        address targetToken;        // Token being traded\r\n        uint256 collateralAmount;   // Initial collateral\r\n        uint256 leverage;           // Leverage multiplier\r\n        bool isLong;               // Long or short position\r\n        uint256 slippageBps;       // Max slippage tolerance\r\n        string platformName;       // \"GMX\" or \"UNISWAP\"\r\n        uint256 duration;          // Max position duration\r\n        bytes platformSpecificData; // Platform-specific parameters\r\n    }\r\n    \r\n    struct Position {\r\n        Platform platform;\r\n        address market;            // Market/pair address\r\n        uint256 entryPrice;       // Entry price (scaled appropriately)\r\n        uint256 exitPrice;        // Exit price (0 if not closed)\r\n        uint256 collateral;       // Actual collateral used\r\n        uint256 size;             // Position size\r\n        uint256 openTimestamp;    // When position was opened\r\n        uint256 closeTimestamp;   // When position was closed (0 if open)\r\n        int256 pnl;               // Profit/loss (signed integer)\r\n    }\r\n    \r\n    struct Vote {\r\n        uint256 startTime;        // Vote start timestamp\r\n        uint256 endTime;         // Vote end timestamp\r\n        uint256 yesVotes;        // Number of yes votes\r\n        uint256 noVotes;         // Number of no votes\r\n        bool executed;           // Whether vote result was executed\r\n        mapping(uint256 => bool) hasVoted; // tokenId => has voted\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STORAGE\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    // Core contract state\r\n    address public factory;\r\n    address public creator;\r\n    Status public status;\r\n    \r\n    // Position details\r\n    PositionParams public params;\r\n    Position public position;\r\n    \r\n    // NFT contracts for voting\r\n    IERC721 public surfBoardNFT;\r\n    IERC721 public mumuFrensNFT;\r\n    \r\n    // Trading integration\r\n    address public platformRouter;\r\n    \r\n    // Voting mechanism\r\n    Vote public currentVote;\r\n    bool public voteInProgress;\r\n    \r\n    // Financial tracking\r\n    uint256 public initialCollateral;\r\n    uint256 public currentValue;\r\n    CloseReason public closeReason;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event PositionOpened(\r\n        Platform platform,\r\n        address market,\r\n        uint256 collateral,\r\n        uint256 leverage,\r\n        bool isLong\r\n    );\r\n    \r\n    event PositionClosed(\r\n        address indexed closer,\r\n        CloseReason reason,\r\n        int256 pnl,\r\n        uint256 finalValue\r\n    );\r\n    \r\n    event VoteStarted(uint256 startTime, uint256 endTime);\r\n    event VoteCast(address indexed voter, uint256 indexed tokenId, bool support);\r\n    event VoteExecuted(bool approved, uint256 yesVotes, uint256 noVotes);\r\n    event FundsWithdrawn(address indexed to, uint256 amount);\r\n    event EmergencyLiquidation(uint256 losses, uint256 remaining);\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             MODIFIERS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator, \"Not creator\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyFactory() {\r\n        require(msg.sender == factory, \"Not factory\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNFTHolder() {\r\n        require(_ownsEligibleNFT(msg.sender), \"Not NFT holder\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOpenPosition() {\r\n        require(status == Status.Open, \"Position not open\");\r\n        _;\r\n    }\r\n    \r\n    modifier notExpired() {\r\n        require(\r\n            block.timestamp <= position.openTimestamp + params.duration,\r\n            \"Position expired\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTRUCTOR\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Constructor (used only for implementation)\r\n     */\r\n    constructor() Ownable(address(0)) {\r\n        _disableInitializers();\r\n    }\r\n    \r\n    /**\r\n     * @notice Initialize the Harpoon (called by factory)\r\n     * @param _creator Position creator\r\n     * @param _surfBoardNFT SURF Board NFT contract\r\n     * @param _mumuFrensNFT mumu-frens NFT contract\r\n     * @param _params Position parameters\r\n     * @param _platformRouter Trading platform router\r\n     */\r\n    function initialize(\r\n        address _creator,\r\n        address _surfBoardNFT,\r\n        address _mumuFrensNFT,\r\n        PositionParams calldata _params,\r\n        address _platformRouter\r\n    ) external initializer {\r\n        require(_creator != address(0), \"Invalid creator\");\r\n        require(_surfBoardNFT != address(0), \"Invalid SURF Board NFT\");\r\n        require(_mumuFrensNFT != address(0), \"Invalid mumu-frens NFT\");\r\n        require(_platformRouter != address(0), \"Invalid platform router\");\r\n        \r\n        factory = msg.sender;\r\n        creator = _creator;\r\n        surfBoardNFT = IERC721(_surfBoardNFT);\r\n        mumuFrensNFT = IERC721(_mumuFrensNFT);\r\n        platformRouter = _platformRouter;\r\n        params = _params;\r\n        status = Status.Pending;\r\n        initialCollateral = _params.collateralAmount;\r\n        \r\n        _transferOwnership(_creator);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          POSITION MANAGEMENT\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Open the trading position\r\n     * @dev Can only be called once by creator\r\n     */\r\n    function openPosition() external onlyCreator nonReentrant {\r\n        require(status == Status.Pending, \"Position already opened\");\r\n        \r\n        // Determine platform\r\n        Platform platform;\r\n        if (keccak256(bytes(params.platformName)) == keccak256(bytes(\"GMX\"))) {\r\n            platform = Platform.GMX;\r\n        } else if (keccak256(bytes(params.platformName)) == keccak256(bytes(\"UNISWAP\"))) {\r\n            platform = Platform.UNISWAP;\r\n        } else {\r\n            revert(\"Unsupported platform\");\r\n        }\r\n        \r\n        // Get collateral from creator\r\n        IERC20 collateralToken = IERC20(params.targetToken); // Simplified - should handle USDC\r\n        collateralToken.safeTransferFrom(creator, address(this), params.collateralAmount);\r\n        \r\n        // Open position based on platform\r\n        if (platform == Platform.GMX) {\r\n            _openGMXPosition();\r\n        } else {\r\n            _openUniswapPosition();\r\n        }\r\n        \r\n        // Update state\r\n        position.platform = platform;\r\n        position.collateral = params.collateralAmount;\r\n        position.openTimestamp = block.timestamp;\r\n        status = Status.Open;\r\n        currentValue = params.collateralAmount;\r\n        \r\n        emit PositionOpened(\r\n            platform,\r\n            position.market,\r\n            params.collateralAmount,\r\n            params.leverage,\r\n            params.isLong\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Close position by creator\r\n     */\r\n    function closePositionByCreator() external onlyCreator onlyOpenPosition nonReentrant {\r\n        _closePosition(CloseReason.Creator);\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency liquidation if position is underwater\r\n     */\r\n    function liquidatePosition() external onlyOpenPosition nonReentrant {\r\n        require(_shouldLiquidate(), \"Position not liquidatable\");\r\n        _closePosition(CloseReason.Liquidation);\r\n    }\r\n    \r\n    /**\r\n     * @notice Close expired position\r\n     */\r\n    function closeExpiredPosition() external onlyOpenPosition nonReentrant {\r\n        require(\r\n            block.timestamp > position.openTimestamp + params.duration,\r\n            \"Position not expired\"\r\n        );\r\n        _closePosition(CloseReason.Expiry);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          VOTING MECHANISM\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Start a vote to close the position\r\n     * @dev Can be called by any NFT holder\r\n     */\r\n    function startVoteToClose() external onlyNFTHolder onlyOpenPosition {\r\n        require(!voteInProgress, \"Vote already in progress\");\r\n        \r\n        currentVote.startTime = block.timestamp;\r\n        currentVote.endTime = block.timestamp + VOTE_DURATION;\r\n        currentVote.yesVotes = 0;\r\n        currentVote.noVotes = 0;\r\n        currentVote.executed = false;\r\n        voteInProgress = true;\r\n        \r\n        emit VoteStarted(currentVote.startTime, currentVote.endTime);\r\n    }\r\n    \r\n    /**\r\n     * @notice Cast vote to close position\r\n     * @param tokenId NFT token ID being used to vote\r\n     * @param support True for yes, false for no\r\n     */\r\n    function voteClose(uint256 tokenId, bool support) external nonReentrant {\r\n        require(voteInProgress, \"No vote in progress\");\r\n        require(block.timestamp <= currentVote.endTime, \"Voting period ended\");\r\n        require(!currentVote.hasVoted[tokenId], \"Token already voted\");\r\n        require(_ownsNFTToken(msg.sender, tokenId), \"Not token owner\");\r\n        \r\n        currentVote.hasVoted[tokenId] = true;\r\n        \r\n        if (support) {\r\n            currentVote.yesVotes++;\r\n        } else {\r\n            currentVote.noVotes++;\r\n        }\r\n        \r\n        emit VoteCast(msg.sender, tokenId, support);\r\n    }\r\n    \r\n    /**\r\n     * @notice Execute vote result\r\n     */\r\n    function executeVote() external nonReentrant {\r\n        require(voteInProgress, \"No vote in progress\");\r\n        require(block.timestamp > currentVote.endTime, \"Voting still active\");\r\n        require(!currentVote.executed, \"Vote already executed\");\r\n        \r\n        currentVote.executed = true;\r\n        voteInProgress = false;\r\n        \r\n        bool approved = currentVote.yesVotes > currentVote.noVotes && \r\n                       currentVote.yesVotes >= MIN_VOTES_FOR_CLOSURE;\r\n        \r\n        emit VoteExecuted(approved, currentVote.yesVotes, currentVote.noVotes);\r\n        \r\n        if (approved) {\r\n            _closePosition(CloseReason.Vote);\r\n        }\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                         INTERNAL FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Open GMX position\r\n     */\r\n    function _openGMXPosition() internal {\r\n        IGMXRouter router = IGMXRouter(platformRouter);\r\n        \r\n        // Approve router to spend collateral\r\n        IERC20(params.targetToken).forceApprove(platformRouter, params.collateralAmount);\r\n        \r\n        // Prepare path (simplified - should be more sophisticated)\r\n        address[] memory path = new address[](1);\r\n        path[0] = params.targetToken;\r\n        \r\n        // Calculate size delta based on leverage\r\n        uint256 sizeDelta = params.collateralAmount * params.leverage;\r\n        \r\n        // Calculate acceptable price with slippage\r\n        uint256 acceptablePrice = _calculateAcceptablePrice();\r\n        \r\n        // Create position\r\n        router.createIncreasePosition(\r\n            path,\r\n            params.targetToken,\r\n            params.collateralAmount,\r\n            0, // minOut\r\n            sizeDelta,\r\n            params.isLong,\r\n            acceptablePrice\r\n        );\r\n        \r\n        position.market = params.targetToken;\r\n        position.size = sizeDelta;\r\n        position.entryPrice = acceptablePrice;\r\n    }\r\n    \r\n    /**\r\n     * @notice Open Uniswap position\r\n     */\r\n    function _openUniswapPosition() internal {\r\n        IUniswapV3Router router = IUniswapV3Router(platformRouter);\r\n        \r\n        // Approve router\r\n        IERC20(params.targetToken).forceApprove(platformRouter, params.collateralAmount);\r\n        \r\n        // For Uniswap, we'll do a simple swap (simplified implementation)\r\n        IUniswapV3Router.ExactInputSingleParams memory swapParams = IUniswapV3Router.ExactInputSingleParams({\r\n            tokenIn: params.targetToken,\r\n            tokenOut: params.targetToken, // Would be different in real implementation\r\n            fee: 3000, // 0.3%\r\n            recipient: address(this),\r\n            deadline: block.timestamp + 300,\r\n            amountIn: params.collateralAmount,\r\n            amountOutMinimum: _calculateMinOut(),\r\n            sqrtPriceLimitX96: 0\r\n        });\r\n        \r\n        uint256 amountOut = router.exactInputSingle(swapParams);\r\n        \r\n        position.market = params.targetToken;\r\n        position.size = amountOut;\r\n        position.entryPrice = (params.collateralAmount * 1e18) / amountOut;\r\n    }\r\n    \r\n    /**\r\n     * @notice Close position and settle\r\n     * @param reason Reason for closure\r\n     */\r\n    function _closePosition(CloseReason reason) internal {\r\n        require(status == Status.Open, \"Position not open\");\r\n        \r\n        // Close based on platform\r\n        if (position.platform == Platform.GMX) {\r\n            _closeGMXPosition();\r\n        } else {\r\n            _closeUniswapPosition();\r\n        }\r\n        \r\n        // Calculate P&L\r\n        currentValue = address(this).balance + IERC20(params.targetToken).balanceOf(address(this));\r\n        position.pnl = int256(currentValue) - int256(initialCollateral);\r\n        position.closeTimestamp = block.timestamp;\r\n        closeReason = reason;\r\n        \r\n        // Update status\r\n        if (reason == CloseReason.Liquidation) {\r\n            status = Status.Liquidated;\r\n        } else {\r\n            status = Status.Closed;\r\n        }\r\n        \r\n        emit PositionClosed(msg.sender, reason, position.pnl, currentValue);\r\n    }\r\n    \r\n    /**\r\n     * @notice Close GMX position\r\n     */\r\n    function _closeGMXPosition() internal {\r\n        IGMXRouter router = IGMXRouter(platformRouter);\r\n        \r\n        address[] memory path = new address[](1);\r\n        path[0] = params.targetToken;\r\n        \r\n        router.createDecreasePosition(\r\n            path,\r\n            params.targetToken,\r\n            position.collateral,\r\n            position.size,\r\n            params.isLong,\r\n            address(this),\r\n            _calculateAcceptablePrice(),\r\n            0\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Close Uniswap position\r\n     */\r\n    function _closeUniswapPosition() internal {\r\n        // Simplified - would swap back to original token\r\n        // Implementation depends on specific Uniswap strategy used\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if position should be liquidated\r\n     */\r\n    function _shouldLiquidate() internal view returns (bool) {\r\n        if (status != Status.Open) return false;\r\n        \r\n        // Simplified liquidation logic\r\n        uint256 currentCollateralValue = _getCurrentValue();\r\n        uint256 lossThreshold = (initialCollateral * LIQUIDATION_THRESHOLD_BPS) / MAX_BPS;\r\n        \r\n        return currentCollateralValue < lossThreshold;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get current position value\r\n     */\r\n    function _getCurrentValue() internal view returns (uint256) {\r\n        // Simplified - would query actual position value from platform\r\n        return currentValue;\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate acceptable price with slippage\r\n     */\r\n    function _calculateAcceptablePrice() internal view returns (uint256) {\r\n        // Simplified price calculation\r\n        return 1e18; // Placeholder\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate minimum output for swaps\r\n     */\r\n    function _calculateMinOut() internal view returns (uint256) {\r\n        uint256 slippageAmount = (params.collateralAmount * params.slippageBps) / MAX_BPS;\r\n        return params.collateralAmount - slippageAmount;\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if address owns eligible NFT\r\n     */\r\n    function _ownsEligibleNFT(address user) internal view returns (bool) {\r\n        return surfBoardNFT.balanceOf(user) > 0 || mumuFrensNFT.balanceOf(user) > 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if address owns specific NFT token\r\n     */\r\n    function _ownsNFTToken(address user, uint256 tokenId) internal view returns (bool) {\r\n        try surfBoardNFT.ownerOf(tokenId) returns (address owner) {\r\n            if (owner == user) return true;\r\n        } catch {}\r\n        \r\n        try mumuFrensNFT.ownerOf(tokenId) returns (address owner) {\r\n            if (owner == user) return true;\r\n        } catch {}\r\n        \r\n        return false;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           VIEW FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Get position details\r\n     */\r\n    function getPositionDetails() external view returns (\r\n        Platform platform,\r\n        uint256 collateral,\r\n        uint256 size,\r\n        uint256 entryPrice,\r\n        uint256 openTime,\r\n        int256 pnl\r\n    ) {\r\n        return (\r\n            position.platform,\r\n            position.collateral,\r\n            position.size,\r\n            position.entryPrice,\r\n            position.openTimestamp,\r\n            position.pnl\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Get current vote details\r\n     */\r\n    function getCurrentVote() external view returns (\r\n        bool inProgress,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 yesVotes,\r\n        uint256 noVotes,\r\n        bool executed\r\n    ) {\r\n        return (\r\n            voteInProgress,\r\n            currentVote.startTime,\r\n            currentVote.endTime,\r\n            currentVote.yesVotes,\r\n            currentVote.noVotes,\r\n            currentVote.executed\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if token has voted\r\n     */\r\n    function hasTokenVoted(uint256 tokenId) external view returns (bool) {\r\n        return currentVote.hasVoted[tokenId];\r\n    }\r\n    \r\n    /**\r\n     * @notice Get estimated current P&L\r\n     */\r\n    function getEstimatedPnL() external view returns (int256) {\r\n        if (status != Status.Open) {\r\n            return position.pnl;\r\n        }\r\n        \r\n        uint256 currentPositionValue = _getCurrentValue();\r\n        return int256(currentPositionValue) - int256(initialCollateral);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          FUND MANAGEMENT\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Withdraw funds after position is closed\r\n     */\r\n    function withdrawFunds() external onlyCreator nonReentrant {\r\n        require(status == Status.Closed || status == Status.Liquidated, \"Position still open\");\r\n        \r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 tokenBalance = IERC20(params.targetToken).balanceOf(address(this));\r\n        \r\n        if (ethBalance > 0) {\r\n            payable(creator).transfer(ethBalance);\r\n        }\r\n        \r\n        if (tokenBalance > 0) {\r\n            IERC20(params.targetToken).safeTransfer(creator, tokenBalance);\r\n        }\r\n        \r\n        emit FundsWithdrawn(creator, ethBalance + tokenBalance);\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency function to recover stuck tokens\r\n     */\r\n    function emergencyRecoverToken(address token, uint256 amount) external onlyCreator {\r\n        require(status == Status.Closed || status == Status.Liquidated, \"Position still active\");\r\n        IERC20(token).safeTransfer(creator, amount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Receive ETH\r\n     */\r\n    receive() external payable {}\r\n}"
      },
      "project/contracts/HarpoonFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"./Harpoon.sol\";\r\nimport \"./CCIPBridgeContract.sol\";\r\n\r\n/**\r\n * @title HarpoonFactory\r\n * @notice Deploys and manages Harpoon trading contracts on Arbitrum\r\n * @dev Handles CCIP cross-chain calls and NFT-gated access\r\n */\r\ncontract HarpoonFactory is Ownable, ReentrancyGuard, Pausable, ICCIPReceiver {\r\n    \r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTANTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    uint256 public constant MAX_HARPOONS_PER_USER = 10;\r\n    uint256 public constant MIN_COLLATERAL = 100e6; // $100 USDC\r\n    uint256 public constant MAX_LEVERAGE = 20;\r\n    uint256 public constant MAX_DURATION = 30 days;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STORAGE\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    // CCIP and cross-chain\r\n    ICCIPRouter public immutable ccipRouter;\r\n    uint64 public immutable ethereumChainSelector;\r\n    address public trustedEthereumSender;\r\n    \r\n    // NFT contracts for access control\r\n    IERC721 public immutable surfBoardNFT;\r\n    IERC721 public immutable mumuFrensNFT;\r\n    \r\n    // Harpoon management\r\n    address public harpoonImplementation;\r\n    uint256 public harpoonCount;\r\n    mapping(uint256 => address) public harpoons;\r\n    mapping(address => uint256[]) public userHarpoons;\r\n    mapping(address => uint256) public userHarpoonCount;\r\n    \r\n    // Fee structure\r\n    uint256 public creationFee = 0.001 ether; // ARB fee for creating harpoons\r\n    address public feeRecipient;\r\n    \r\n    // Platform integrations\r\n    mapping(string => bool) public supportedPlatforms;\r\n    mapping(string => address) public platformRouters;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STRUCTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    struct HarpoonParams {\r\n        address targetToken;        // Token to trade\r\n        uint256 collateralAmount;   // Collateral in USDC\r\n        uint256 leverage;           // Leverage multiplier (1-20)\r\n        bool isLong;               // Long or short position\r\n        uint256 slippageBps;       // Max slippage in basis points\r\n        string platform;           // \"GMX\" or \"UNISWAP\"\r\n        uint256 duration;          // Max position duration in seconds\r\n        bytes platformSpecificData; // Additional platform-specific parameters\r\n    }\r\n    \r\n    struct CCIPMessage {\r\n        address sender;            // Ethereum sender\r\n        bytes4 selector;          // Function selector\r\n        bytes data;               // Encoded parameters\r\n        uint256 nonce;            // Prevent replay\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event HarpoonCreated(\r\n        uint256 indexed id,\r\n        address indexed harpoon,\r\n        address indexed creator,\r\n        HarpoonParams params\r\n    );\r\n    \r\n    event HarpoonClosed(uint256 indexed id, address indexed closer, uint256 pnl);\r\n    event CCIPMessageReceived(address indexed sender, bytes4 indexed selector);\r\n    event PlatformAdded(string platform, address router);\r\n    event PlatformRemoved(string platform);\r\n    event CreationFeeUpdated(uint256 oldFee, uint256 newFee);\r\n    event TrustedSenderUpdated(address oldSender, address newSender);\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             MODIFIERS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    modifier onlyNFTHolder(address user) {\r\n        require(hasEligibleNFT(user), \"No eligible NFT\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCCIP() {\r\n        require(msg.sender == address(ccipRouter), \"Not CCIP router\");\r\n        _;\r\n    }\r\n    \r\n    modifier validHarpoonParams(HarpoonParams calldata params) {\r\n        require(params.collateralAmount >= MIN_COLLATERAL, \"Insufficient collateral\");\r\n        require(params.leverage > 0 && params.leverage <= MAX_LEVERAGE, \"Invalid leverage\");\r\n        require(params.duration > 0 && params.duration <= MAX_DURATION, \"Invalid duration\");\r\n        require(supportedPlatforms[params.platform], \"Unsupported platform\");\r\n        require(params.slippageBps <= 1000, \"Slippage too high\"); // Max 10%\r\n        _;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTRUCTOR\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    constructor(\r\n        address _ccipRouter,\r\n        uint64 _ethereumChainSelector,\r\n        address _surfBoardNFT,\r\n        address _mumuFrensNFT,\r\n        address _feeRecipient\r\n    ) Ownable(msg.sender) {\r\n        require(_ccipRouter != address(0), \"Invalid CCIP router\");\r\n        require(_surfBoardNFT != address(0), \"Invalid SURF Board NFT\");\r\n        require(_mumuFrensNFT != address(0), \"Invalid mumu-frens NFT\");\r\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\r\n        \r\n        ccipRouter = ICCIPRouter(_ccipRouter);\r\n        ethereumChainSelector = _ethereumChainSelector;\r\n        surfBoardNFT = IERC721(_surfBoardNFT);\r\n        mumuFrensNFT = IERC721(_mumuFrensNFT);\r\n        feeRecipient = _feeRecipient;\r\n        \r\n        // Deploy Harpoon implementation\r\n        harpoonImplementation = address(new Harpoon());\r\n        \r\n        // Add supported platforms\r\n        supportedPlatforms[\"GMX\"] = true;\r\n        supportedPlatforms[\"UNISWAP\"] = true;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CORE FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Create a Harpoon from cross-chain CCIP call\r\n     * @param params Harpoon parameters\r\n     * @param creator Original creator from Ethereum\r\n     * @return harpoon Address of created Harpoon contract\r\n     */\r\n    function createHarpoonFromCCIP(\r\n        HarpoonParams calldata params,\r\n        address creator\r\n    ) \r\n        external \r\n        onlyCCIP \r\n        whenNotPaused\r\n        validHarpoonParams(params)\r\n        returns (address harpoon) \r\n    {\r\n        // Verify creator has eligible NFT (would need cross-chain verification)\r\n        // For now, we trust the Ethereum side verification\r\n        \r\n        return _createHarpoon(params, creator);\r\n    }\r\n    \r\n    /**\r\n     * @notice Create a Harpoon directly on Arbitrum (for NFT holders)\r\n     * @param params Harpoon parameters\r\n     * @return harpoon Address of created Harpoon contract\r\n     */\r\n    function createHarpoon(HarpoonParams calldata params) \r\n        external \r\n        payable\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyNFTHolder(msg.sender)\r\n        validHarpoonParams(params)\r\n        returns (address harpoon) \r\n    {\r\n        require(msg.value >= creationFee, \"Insufficient creation fee\");\r\n        require(userHarpoonCount[msg.sender] < MAX_HARPOONS_PER_USER, \"Too many harpoons\");\r\n        \r\n        // Transfer creation fee\r\n        if (msg.value > 0) {\r\n            payable(feeRecipient).transfer(msg.value);\r\n        }\r\n        \r\n        return _createHarpoon(params, msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * @notice Internal function to create a Harpoon\r\n     * @param params Harpoon parameters\r\n     * @param creator Creator address\r\n     * @return harpoon Address of created Harpoon contract\r\n     */\r\n    function _createHarpoon(\r\n        HarpoonParams calldata params,\r\n        address creator\r\n    ) internal returns (address harpoon) {\r\n        // Create deterministic salt for CREATE2\r\n        bytes32 salt = keccak256(abi.encodePacked(creator, harpoonCount, block.timestamp));\r\n        \r\n        // Deploy Harpoon clone\r\n        harpoon = Clones.cloneDeterministic(harpoonImplementation, salt);\r\n        \r\n        // Convert HarpoonParams to PositionParams\r\n        Harpoon.PositionParams memory positionParams = Harpoon.PositionParams({\r\n            targetToken: params.targetToken,\r\n            collateralAmount: params.collateralAmount,\r\n            leverage: params.leverage,\r\n            isLong: params.isLong,\r\n            slippageBps: params.slippageBps,\r\n            platformName: params.platform,\r\n            duration: params.duration,\r\n            platformSpecificData: params.platformSpecificData\r\n        });\r\n        \r\n        // Initialize Harpoon\r\n        Harpoon(payable(harpoon)).initialize(\r\n            creator,\r\n            address(surfBoardNFT),\r\n            address(mumuFrensNFT),\r\n            positionParams,\r\n            platformRouters[params.platform]\r\n        );\r\n        \r\n        // Update mappings\r\n        uint256 harpoonId = harpoonCount++;\r\n        harpoons[harpoonId] = harpoon;\r\n        userHarpoons[creator].push(harpoonId);\r\n        userHarpoonCount[creator]++;\r\n        \r\n        emit HarpoonCreated(harpoonId, harpoon, creator, params);\r\n        \r\n        return harpoon;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           CCIP FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Receive CCIP messages from Ethereum\r\n     * @param message Encoded CCIP message\r\n     */\r\n    function ccipReceive(bytes calldata message) external override onlyCCIP {\r\n        CCIPMessage memory ccipMsg = abi.decode(message, (CCIPMessage));\r\n        \r\n        // Verify sender is trusted\r\n        require(ccipMsg.sender == trustedEthereumSender, \"Untrusted sender\");\r\n        \r\n        // Route message based on selector\r\n        if (ccipMsg.selector == this.createHarpoonFromCCIP.selector) {\r\n            (HarpoonParams memory params, address creator) = abi.decode(\r\n                ccipMsg.data, \r\n                (HarpoonParams, address)\r\n            );\r\n            this.createHarpoonFromCCIP(params, creator);\r\n        }\r\n        \r\n        emit CCIPMessageReceived(ccipMsg.sender, ccipMsg.selector);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           VIEW FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Check if user has eligible NFT\r\n     * @param user User address\r\n     * @return True if user owns SURF Board or mumu-frens NFT\r\n     */\r\n    function hasEligibleNFT(address user) public view returns (bool) {\r\n        return surfBoardNFT.balanceOf(user) > 0 || mumuFrensNFT.balanceOf(user) > 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Harpoon address by ID\r\n     * @param id Harpoon ID\r\n     * @return Harpoon contract address\r\n     */\r\n    function getHarpoon(uint256 id) external view returns (address) {\r\n        require(id < harpoonCount, \"Invalid harpoon ID\");\r\n        return harpoons[id];\r\n    }\r\n    \r\n    /**\r\n     * @notice Get user's Harpoon IDs\r\n     * @param user User address\r\n     * @return Array of Harpoon IDs\r\n     */\r\n    function getUserHarpoons(address user) external view returns (uint256[] memory) {\r\n        return userHarpoons[user];\r\n    }\r\n    \r\n    /**\r\n     * @notice Get Harpoon details\r\n     * @param id Harpoon ID\r\n     * @return harpoon Harpoon address\r\n     * @return creator Creator address\r\n     * @return status Current status\r\n     */\r\n    function getHarpoonDetails(uint256 id) external view returns (\r\n        address harpoon,\r\n        address creator,\r\n        Harpoon.Status status\r\n    ) {\r\n        require(id < harpoonCount, \"Invalid harpoon ID\");\r\n        harpoon = harpoons[id];\r\n        Harpoon harpoonContract = Harpoon(payable(harpoon));\r\n        creator = harpoonContract.creator();\r\n        status = harpoonContract.status();\r\n    }\r\n    \r\n    /**\r\n     * @notice Check if platform is supported\r\n     * @param platform Platform name\r\n     * @return True if platform is supported\r\n     */\r\n    function isPlatformSupported(string calldata platform) external view returns (bool) {\r\n        return supportedPlatforms[platform];\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          ADMIN FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Add supported trading platform\r\n     * @param platform Platform name (e.g., \"GMX\", \"UNISWAP\")\r\n     * @param router Platform router address\r\n     */\r\n    function addPlatform(string calldata platform, address router) external onlyOwner {\r\n        require(router != address(0), \"Invalid router\");\r\n        supportedPlatforms[platform] = true;\r\n        platformRouters[platform] = router;\r\n        emit PlatformAdded(platform, router);\r\n    }\r\n    \r\n    /**\r\n     * @notice Remove supported trading platform\r\n     * @param platform Platform name\r\n     */\r\n    function removePlatform(string calldata platform) external onlyOwner {\r\n        supportedPlatforms[platform] = false;\r\n        delete platformRouters[platform];\r\n        emit PlatformRemoved(platform);\r\n    }\r\n    \r\n    /**\r\n     * @notice Set trusted Ethereum sender for CCIP\r\n     * @param _trustedSender Ethereum LPVault or router address\r\n     */\r\n    function setTrustedEthereumSender(address _trustedSender) external onlyOwner {\r\n        address oldSender = trustedEthereumSender;\r\n        trustedEthereumSender = _trustedSender;\r\n        emit TrustedSenderUpdated(oldSender, _trustedSender);\r\n    }\r\n    \r\n    /**\r\n     * @notice Update creation fee\r\n     * @param _newFee New creation fee in wei\r\n     */\r\n    function setCreationFee(uint256 _newFee) external onlyOwner {\r\n        uint256 oldFee = creationFee;\r\n        creationFee = _newFee;\r\n        emit CreationFeeUpdated(oldFee, _newFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice Update fee recipient\r\n     * @param _newRecipient New fee recipient address\r\n     */\r\n    function setFeeRecipient(address _newRecipient) external onlyOwner {\r\n        require(_newRecipient != address(0), \"Invalid recipient\");\r\n        feeRecipient = _newRecipient;\r\n    }\r\n    \r\n    /**\r\n     * @notice Update Harpoon implementation (for upgrades)\r\n     * @param _newImplementation New Harpoon implementation address\r\n     */\r\n    function setHarpoonImplementation(address _newImplementation) external onlyOwner {\r\n        require(_newImplementation != address(0), \"Invalid implementation\");\r\n        harpoonImplementation = _newImplementation;\r\n    }\r\n    \r\n    /**\r\n     * @notice Pause the factory\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Unpause the factory\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency withdraw ETH\r\n     */\r\n    function emergencyWithdrawETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @notice Receive function for ETH deposits\r\n     */\r\n    receive() external payable {}\r\n}"
      },
      "project/contracts/LPVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n\r\n/**\r\n * @title LPVault\r\n * @notice Users deposit SURF/WETH Uniswap V2 LP tokens and earn USDC rewards\r\n * @dev Implements a share-based reward distribution system\r\n */\r\ncontract LPVault is ReentrancyGuard, Pausable, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using Math for uint256;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTANTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    uint256 private constant PRECISION = 1e30;\r\n    uint256 public constant EMERGENCY_WITHDRAW_FEE_BPS = 100; // 1%\r\n    uint256 public constant MAX_BPS = 10000;\r\n    uint256 public constant MIN_DEPOSIT = 1e15; // 0.001 LP tokens\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             STORAGE\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    IERC20 public immutable lpToken;   // SURF/WETH LP token\r\n    IERC20 public immutable usdc;      // Reward token\r\n    \r\n    uint256 public totalShares;        // Total shares outstanding\r\n    uint256 public accUSDCPerShare;    // Accumulated USDC per share (scaled by PRECISION)\r\n    uint256 public lastRewardBlock;    // Last block when rewards were distributed\r\n    \r\n    // Emergency withdraw fee recipient\r\n    address public feeRecipient;\r\n    \r\n    // Reward distribution\r\n    address public rewardDistributor;\r\n    uint256 public totalRewardsDistributed;\r\n    \r\n    struct UserInfo {\r\n        uint256 shares;                // User's share in the pool\r\n        uint256 rewardDebt;           // Reward debt for accurate reward calculation\r\n        uint256 lastDepositBlock;     // Last deposit block (for potential time locks)\r\n    }\r\n    \r\n    mapping(address => UserInfo) public users;\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             EVENTS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    event Deposit(address indexed user, uint256 lpAmount, uint256 shares);\r\n    event Withdraw(address indexed user, uint256 shares, uint256 lpAmount);\r\n    event EmergencyWithdraw(address indexed user, uint256 lpAmount, uint256 fee);\r\n    event Claim(address indexed user, uint256 amount);\r\n    event RewardNotified(uint256 amount, address indexed distributor);\r\n    event RewardDistributorChanged(address indexed oldDistributor, address indexed newDistributor);\r\n    event FeeRecipientChanged(address indexed oldRecipient, address indexed newRecipient);\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             MODIFIERS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    modifier onlyRewardDistributor() {\r\n        require(msg.sender == rewardDistributor || msg.sender == owner(), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address user) {\r\n        if (user != address(0)) {\r\n            users[user].rewardDebt = users[user].shares * accUSDCPerShare / PRECISION;\r\n        }\r\n        _;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                             CONSTRUCTOR\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Constructor\r\n     * @param _lpToken SURF/WETH LP token address\r\n     * @param _usdc USDC token address\r\n     * @param _feeRecipient Emergency withdraw fee recipient\r\n     */\r\n    constructor(\r\n        address _lpToken,\r\n        address _usdc,\r\n        address _feeRecipient\r\n    ) Ownable(msg.sender) {\r\n        require(_lpToken != address(0), \"Invalid LP token\");\r\n        require(_usdc != address(0), \"Invalid USDC token\");\r\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\r\n        \r\n        lpToken = IERC20(_lpToken);\r\n        usdc = IERC20(_usdc);\r\n        feeRecipient = _feeRecipient;\r\n        rewardDistributor = msg.sender;\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          CORE USER FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Deposit LP tokens to earn USDC rewards\r\n     * @param lpAmount Amount of LP tokens to deposit\r\n     */\r\n    function deposit(uint256 lpAmount) external nonReentrant whenNotPaused updateReward(msg.sender) {\r\n        require(lpAmount >= MIN_DEPOSIT, \"Deposit too small\");\r\n        \r\n        UserInfo storage user = users[msg.sender];\r\n        \r\n        // Calculate shares to mint\r\n        uint256 shares;\r\n        if (totalShares == 0) {\r\n            shares = lpAmount;\r\n        } else {\r\n            shares = lpAmount * totalShares / lpBalance();\r\n        }\r\n        \r\n        require(shares > 0, \"No shares minted\");\r\n        \r\n        // Update state\r\n        user.shares += shares;\r\n        user.lastDepositBlock = block.number;\r\n        totalShares += shares;\r\n        \r\n        // Transfer LP tokens\r\n        lpToken.safeTransferFrom(msg.sender, address(this), lpAmount);\r\n        \r\n        emit Deposit(msg.sender, lpAmount, shares);\r\n    }\r\n    \r\n    /**\r\n     * @notice Withdraw LP tokens by burning shares\r\n     * @param shareAmount Amount of shares to burn\r\n     */\r\n    function withdraw(uint256 shareAmount) external nonReentrant updateReward(msg.sender) {\r\n        UserInfo storage user = users[msg.sender];\r\n        require(shareAmount > 0, \"Invalid share amount\");\r\n        require(user.shares >= shareAmount, \"Insufficient shares\");\r\n        \r\n        // Calculate LP tokens to return\r\n        uint256 lpAmount = shareAmount * lpBalance() / totalShares;\r\n        require(lpAmount > 0, \"No LP tokens to withdraw\");\r\n        \r\n        // Update state\r\n        user.shares -= shareAmount;\r\n        totalShares -= shareAmount;\r\n        \r\n        // Transfer LP tokens\r\n        lpToken.safeTransfer(msg.sender, lpAmount);\r\n        \r\n        emit Withdraw(msg.sender, shareAmount, lpAmount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Claim accumulated USDC rewards\r\n     */\r\n    function claimRewards() external nonReentrant updateReward(msg.sender) {\r\n        uint256 rewards = pendingRewards(msg.sender);\r\n        if (rewards > 0) {\r\n            users[msg.sender].rewardDebt = users[msg.sender].shares * accUSDCPerShare / PRECISION;\r\n            usdc.safeTransfer(msg.sender, rewards);\r\n            emit Claim(msg.sender, rewards);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency withdraw all LP tokens (with fee)\r\n     */\r\n    function emergencyWithdraw() external nonReentrant {\r\n        UserInfo storage user = users[msg.sender];\r\n        uint256 userShares = user.shares;\r\n        require(userShares > 0, \"No shares to withdraw\");\r\n        \r\n        // Calculate LP tokens\r\n        uint256 lpAmount = userShares * lpBalance() / totalShares;\r\n        uint256 fee = lpAmount * EMERGENCY_WITHDRAW_FEE_BPS / MAX_BPS;\r\n        uint256 userAmount = lpAmount - fee;\r\n        \r\n        // Reset user\r\n        user.shares = 0;\r\n        user.rewardDebt = 0;\r\n        totalShares -= userShares;\r\n        \r\n        // Transfer tokens\r\n        if (userAmount > 0) {\r\n            lpToken.safeTransfer(msg.sender, userAmount);\r\n        }\r\n        if (fee > 0) {\r\n            lpToken.safeTransfer(feeRecipient, fee);\r\n        }\r\n        \r\n        emit EmergencyWithdraw(msg.sender, userAmount, fee);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                          REWARD DISTRIBUTION\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Distribute USDC rewards to all LP stakers\r\n     * @param usdcAmount Amount of USDC to distribute\r\n     */\r\n    function notifyRewardAmount(uint256 usdcAmount) external onlyRewardDistributor {\r\n        require(usdcAmount > 0, \"No rewards to distribute\");\r\n        require(totalShares > 0, \"No shares to distribute to\");\r\n        \r\n        // Transfer USDC from distributor\r\n        usdc.safeTransferFrom(msg.sender, address(this), usdcAmount);\r\n        \r\n        // Update accumulated rewards per share\r\n        accUSDCPerShare += usdcAmount * PRECISION / totalShares;\r\n        totalRewardsDistributed += usdcAmount;\r\n        lastRewardBlock = block.number;\r\n        \r\n        emit RewardNotified(usdcAmount, msg.sender);\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                           VIEW FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Calculate pending USDC rewards for a user\r\n     * @param user User address\r\n     * @return Pending USDC rewards\r\n     */\r\n    function pendingRewards(address user) public view returns (uint256) {\r\n        UserInfo memory userInfo = users[user];\r\n        if (userInfo.shares == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 totalRewards = userInfo.shares * accUSDCPerShare / PRECISION;\r\n        if (totalRewards <= userInfo.rewardDebt) {\r\n            return 0;\r\n        }\r\n        \r\n        return totalRewards - userInfo.rewardDebt;\r\n    }\r\n    \r\n    /**\r\n     * @notice Get current LP token balance of the contract\r\n     * @return LP token balance\r\n     */\r\n    function lpBalance() public view returns (uint256) {\r\n        return lpToken.balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * @notice Get user info\r\n     * @param user User address\r\n     * @return shares User's shares\r\n     * @return rewardDebt User's reward debt\r\n     * @return pendingUSDC Pending USDC rewards\r\n     */\r\n    function getUserInfo(address user) external view returns (\r\n        uint256 shares,\r\n        uint256 rewardDebt,\r\n        uint256 pendingUSDC\r\n    ) {\r\n        UserInfo memory userInfo = users[user];\r\n        return (\r\n            userInfo.shares,\r\n            userInfo.rewardDebt,\r\n            pendingRewards(user)\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate LP tokens for a given amount of shares\r\n     * @param shareAmount Amount of shares\r\n     * @return LP token amount\r\n     */\r\n    function sharesToLP(uint256 shareAmount) external view returns (uint256) {\r\n        if (totalShares == 0) {\r\n            return shareAmount;\r\n        }\r\n        return shareAmount * lpBalance() / totalShares;\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculate shares for a given amount of LP tokens\r\n     * @param lpAmount Amount of LP tokens\r\n     * @return Share amount\r\n     */\r\n    function lpToShares(uint256 lpAmount) external view returns (uint256) {\r\n        if (totalShares == 0) {\r\n            return lpAmount;\r\n        }\r\n        return lpAmount * totalShares / lpBalance();\r\n    }\r\n\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    //                         ADMIN FUNCTIONS\r\n    // ═══════════════════════════════════════════════════════════════════\r\n    \r\n    /**\r\n     * @notice Set reward distributor address\r\n     * @param _rewardDistributor New reward distributor address\r\n     */\r\n    function setRewardDistributor(address _rewardDistributor) external onlyOwner {\r\n        require(_rewardDistributor != address(0), \"Invalid address\");\r\n        address oldDistributor = rewardDistributor;\r\n        rewardDistributor = _rewardDistributor;\r\n        emit RewardDistributorChanged(oldDistributor, _rewardDistributor);\r\n    }\r\n    \r\n    /**\r\n     * @notice Set fee recipient address\r\n     * @param _feeRecipient New fee recipient address\r\n     */\r\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\r\n        require(_feeRecipient != address(0), \"Invalid address\");\r\n        address oldRecipient = feeRecipient;\r\n        feeRecipient = _feeRecipient;\r\n        emit FeeRecipientChanged(oldRecipient, _feeRecipient);\r\n    }\r\n    \r\n    /**\r\n     * @notice Pause the contract\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Unpause the contract\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n    \r\n    /**\r\n     * @notice Emergency function to recover stuck tokens (not LP or USDC)\r\n     * @param token Token address to recover\r\n     * @param amount Amount to recover\r\n     */\r\n    function recoverToken(address token, uint256 amount) external onlyOwner {\r\n        require(token != address(lpToken), \"Cannot recover LP token\");\r\n        require(token != address(usdc), \"Cannot recover USDC\");\r\n        IERC20(token).safeTransfer(owner(), amount);\r\n    }\r\n}"
      }
    }
  }
}